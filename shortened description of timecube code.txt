Okay, now let's go for a slightly more complicated code setup. I have the following index.html:
"""
<!DOCTYPE html>
<html>
    <head>
        <title>3D Video Timecube</title>
        <style>
            body { margin: 0; }
            canvas { width: 100%; height: 100% }
            #upload {
                display: none;
            }
            #overlay {
                position: fixed;
                display: flex;
                justify-content: center;
                align-items: center;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background-color: rgba(0, 0, 0, 0.5); /* semi-transparent black */
                z-index: 9990; /* make sure it appears on top */
            }
            #loading-text {
                color: white;
                font-size: 2em;
            }
        </style>
    </head>
    <body>
        <div id="upload">
            <input type="file" id="plyFile" accept=".ply">
        </div>
        <div id="overlay">
            <div id="loading-text">Loading...</div>
        </div>
        <div id="canvasContainer" style="position: absolute; top: 0; left: 0; pointer-events: none;"></div>
        <script src="timecube_slicer.js"></script>
    </body>
</html>
"""
and the corresponding "timecube_slicer.js" script [note that when I use "//...", it means there's a chunk of code in the actual file that I'm skipping over for brevity]:
"""
import * as THREE from 'three';
import { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import * as dat from 'dat.gui';
import { createGrid, findNearestNeighbor } from './nearestNeighbor.js'; //import custom code
import Stats from 'stats.js' //check framerate


//Declaring (most) global variables here
//...

// Set up material variables here
//...

// Scene, Camera, Renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
//const renderer = new THREE.WebGLRenderer( { antialias : false } ); //for fps improvements if required
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
// Set camera position
camera.position.z = 5;

//transparency settings
renderer.setTransparentSort

// Orbit Controls
const controls = new OrbitControls(camera, renderer.domElement);

//create GUI
const gui = new dat.GUI();
//add GUI folders
const timecubeFolder = gui.addFolder('General Settings');
const planeFolder = gui.addFolder('Plane Controls');
const shaderFolder = gui.addFolder('Shader Controls');
// Make sure all main folders are open, subfolders closed
timecubeFolder.open();
planeFolder.open();
shaderFolder.open();


//instantiating fps counter if debugging mode is on
//...

//function for lowering resolution while plane is being moved
function doWhileMoving() {
    planeIsMoving = true;
    displayWidth = lowResWidth;
    displayHeight = lowResHeight;
    updateAfterMoving = true;
    displayColors = new Array(lowResHeight).fill(0).map(() => new Array(lowResWidth).fill([0, 0, 0]));
}

// Let user upload .ply file of their choice
var params = {
    loadFile : function() { 
            document.getElementById('plyFile').click();
    }
};
// Add .ply loader to GUI
timecubeFolder.add(params, 'loadFile').name('Load Custom PLY File [you might have to try twice]').onChange(function(value) {
    const fileInput = document.getElementById('plyFile');
    const file = fileInput.files[0];
    if (!file) {
        console.log('No file selected!');
        return;
    }

    // This line creates a URL representing the File object
    const url = URL.createObjectURL(file);
    
    // Now load the PLY from the generated URL
    loadPly(url);
    }
);


// Set background color
//...

//add red cube in center for debugging + troubleshooting
//...


// create a 2D array to store the color values for each pixel in the GUI display:
let displayColors = new Array(displayHeight).fill(0).map(() => new Array(displayWidth).fill([0, 0, 0]));  // Initialize to black

// Create a 2D canvas for the GUI
canvas = document.createElement('canvas');
canvas.width = displayWidth;
canvas.height = displayHeight;
document.body.appendChild(canvas);
ctx = canvas.getContext('2d');
//append the canvas to a <div> in the html instead of to the body
const canvasContainer = document.getElementById('canvasContainer');
canvasContainer.appendChild(canvas);

// Create a second canvas for buffering
let bufferCanvas = document.createElement('canvas');
bufferCanvas.width = displayWidth;
bufferCanvas.height = displayHeight;
let bufferCtx = bufferCanvas.getContext('2d');

// Create the texture here, after the canvas is created
planeTexture = new THREE.Texture(canvas);
planeTexture.minFilter = THREE.NearestFilter; // Disable minification filtering
planeTexture.magFilter = THREE.NearestFilter; // Disable magnification filtering


//add intersecting plane to the scene
const planeGeometry = new THREE.PlaneGeometry(planeWidth, planeHeight); //width and height of plane
//const planeMaterial = new THREE.MeshBasicMaterial({color: 'white', side: THREE.DoubleSide});
const planeMaterial = new THREE.MeshBasicMaterial({ map: planeTexture, side: THREE.DoubleSide });
plane = new THREE.Mesh(planeGeometry, planeMaterial);
//have plane be child of planeContainer (an invisible point in the center of world)
const planeContainer = new THREE.Object3D(); //this is what we are rotating around
planeContainer.add(plane);
scene.add(planeContainer);


//directions to manipulate plane in, and setting vars to check if user is moving the plane
planeFolder.add(plane.position, 'z', -100, 100).name('Plane Position').onChange(function() {doWhileMoving()}); //coordinates are how far to go in either direction
//...

  //let player turn plane invisible (by default shown) by toggling which layer its on
  let showPlane = { value: false };
  planeFolder.add(showPlane, 'value').name('Hide Plane').onChange(function() {
    plane.layers.toggle( 0 );
  });
planeFolder.open(); //have the folder start off with all options showing


// Set up different material properties
//...
// Initialize material, should be basicMaterial normally
material = basicMaterial;

// Shader GUI stuff
shaderFolder.add(uniforms.size, 'value', 0, 1).name('Voxel size'); // Add size option to GUI
// Choose transparency shader.
//...

//.ply loader
function loadPly(url) {
    // Remove the old Points object from the scene, if it exists
    if (points) {
        scene.remove(points);
    }
    //load new ply file
    const loader = new PLYLoader();
    loader.load(url, function (geometry) {
        // your original code here, minus the loader.load call
        geometry.rotateZ(Math.PI);
        geometry.center(); 
        //const material = new THREE.PointsMaterial({ size: 0.2, vertexColors: true }); //`size: 0.2`, usually
        material.needsUpdate = true;

        points = new THREE.Points(geometry, material);
        scene.add(points);
        // And make the scene update
        doWhileMoving();

        // Create the grid after the points have been added to the scene
        grid = createGrid(points, cellSize);
    }, undefined, function (error) {
        console.error(error);
    });
}
// Load a default PLY file from a URL when the script runs
loadPly(defaultPlyFile);

// // Add GUI folder to let user filter the alpha value
//...
// This function updates the canvas
function updateCanvas() {
//...
}

// This function draws the new frame
function drawFrame() {
//...
}

// Animation loop
function animate() {
    fpsCounter.begin()
    //check if loading is finished or not
    if (points || debug){
        document.getElementById('overlay').style.display = 'none'; // hide loading overlay
    }    
    //update and draw canvas on plane and GUI
    updateCanvas();
    drawFrame();
    // Render the scene
    controls.update();
    renderer.render(scene, camera);
    requestAnimationFrame(animate);
    // reset flag
    if (planeIsMoving) {
        planeIsMoving = false;
    }
    fpsCounter.end()
}
animate();